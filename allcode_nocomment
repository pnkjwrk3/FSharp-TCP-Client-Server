// Client.fs
open System
open System.Net.Sockets
open System.Text
open System.Threading

let address = "127.0.0.1"
let port = 8888
let client = new TcpClient()
client.Connect(address, port)
printfn "Connected to server at %s:%d" address port
let stream = client.GetStream()

let sendCommand (command: string) =
    stream.Write(Encoding.UTF8.GetBytes(command), 0, command.Length)
    printfn "Sent to server: %s" command
    let buffer = Array.zeroCreate 1024
    let bytes = stream.Read(buffer, 0, buffer.Length)
    let response = Encoding.UTF8.GetString(buffer, 0, bytes)
    printfn "Received from server: %s" response
    response

let rec checkForIncomingMessages () =
    async {
        let buffer = Array.zeroCreate 1024
        if stream.DataAvailable then
            let! bytes = stream.ReadAsync(buffer, 0, buffer.Length) |> Async.AwaitTask
            let response = Encoding.UTF8.GetString(buffer, 0, bytes)
            printfn "Received from server: %s" response
            if response = "-5" then
                printfn "#exit"
                stream.Close()
                client.Close()
                Environment.Exit(0)
        return! checkForIncomingMessages ()
    }

let incomingMessagesThread = Thread(fun () -> Async.RunSynchronously (checkForIncomingMessages ()))
incomingMessagesThread.Start()

let rec interactWithServer () =
    let command = Console.ReadLine()
    let response = sendCommand command
    if response.StartsWith("-") then
        match response with
        | "-1" -> printfn "Error: Incorrect operation command"
        | "-2" -> printfn "Error: Number of inputs is less than two"
        | "-3" -> printfn "Error: Number of inputs is more than four"
        | "-4" -> printfn "Error: One or more inputs contain non-number(s)"
        | "-5" ->
            printfn "#exit"
            stream.Close()
            client.Close()
            Environment.Exit(0)
        | _ -> printfn "Error: Unknown error code"
    else
        printfn "Result: %s" response
    interactWithServer()

interactWithServer()


// Server.fs
open System
open System.Net
open System.Net.Sockets
open System.Text

let port = 8888
let listener = new TcpListener(IPAddress.Any, port)
listener.Start()
printfn "Server is listening on port %d" port

type ClientInfo = { Client: TcpClient; Number: int }
let clients = ResizeArray<ClientInfo>()
let mutable nextClientNumber = 1

let isInteger (s: string) =
    match Int32.TryParse(s) with
    | (true, _) -> true
    | (false, _) -> false

let terminate () =
    let mutable disconnectedClients = []
    for clientInfo in clients do
        try
            let stream = clientInfo.Client.GetStream()
            if clientInfo.Client.Connected then
                stream.Write(Encoding.UTF8.GetBytes("-5"), 0, 2)
                stream.Close()
                clientInfo.Client.Close()
                printfn "Sent from terminate client %d: -5" clientInfo.Number
            else
                disconnectedClients <- clientInfo :: disconnectedClients
        with
        | ex ->
            printfn "Error while terminating client: %s" (ex.Message)

    for disconnectedClient in disconnectedClients do
        clients.Remove(disconnectedClient)

    clients.Clear()
    listener.Stop()
    printfn "Server is stopped"
    Environment.Exit(0)

let checkCommand (command: string) (inputs: int array) =
    try
        match command with
        | "add" | "sub" | "mul" ->
            match inputs.Length with
            | 2 | 3 | 4 ->
                let result =
                    match command with
                    | "add" -> inputs |> Array.sum
                    | "sub" -> inputs |> Array.reduce (-)
                    | "mul" -> inputs |> Array.reduce (*)
                    | _ -> failwith "Invalid command"
                if result < 0 then -1 else result
            | n when n < 2 -> -2
            | n when n > 4 -> -3
        | "bye" -> -5
        | "terminate" -> terminate (); -5
        | _ -> -1
    with
    | ex -> -1

let handleClient (clientInfo: ClientInfo) =
    let client = clientInfo.Client
    let stream = client.GetStream()
    let buffer = Array.zeroCreate 1024
    stream.Write(Encoding.UTF8.GetBytes("Hello!"), 0, 6)
    printfn "Sent to client %d: Hello!" clientInfo.Number
    let rec loop () =
        let bytes = stream.Read(buffer, 0, buffer.Length)
        if bytes > 0 then
            let message = Encoding.UTF8.GetString(buffer, 0, bytes)
            printfn "Received from client %d: %s" clientInfo.Number message
            let parts = message.Split(' ')
            let command = parts.[0]
            let inputs = parts.[1..]
            let validInputs = inputs |> Array.forall isInteger
            let resultOrError =
                if validInputs then 
                    let inputNumbers = inputs |> Array.map Int32.Parse
                    try
                        checkCommand command inputNumbers 
                    with
                    | :? System.FormatException -> -4
                    | ex -> -1
                else -4
            let response = resultOrError.ToString()
            if command = "terminate" && resultOrError = -5 then
                false
            else
                stream.Write(Encoding.UTF8.GetBytes(response), 0, response.Length)
                printfn "Sent to client %d: %s" clientInfo.Number response
                if resultOrError > 0 then
                    loop ()
                elif resultOrError = -5 && command <> "terminate" then
                    stream.Close()
                    client.Close()
                    printfn "Client %d disconnected, bye" clientInfo.Number
                    clients.Remove(clientInfo)
                elif resultOrError = -1 || resultOrError = -2 || resultOrError = -3 || resultOrError = -4 then
                    loop ()
                elif resultOrError = -5 && command = "terminate" then
                    false
                else
                    false
        else
            printfn "Client %d disconnected" clientInfo.Number
            false
    loop ()

try
    while true do
        let client = listener.AcceptTcpClient()
        printfn "Client connected"
        let clientNumber = nextClientNumber
        nextClientNumber <- nextClientNumber + 1
        let clientInfo = { Client = client; Number = clientNumber }
        clients.Add(clientInfo)
        let clientEndPoint = client.Client.RemoteEndPoint :?> IPEndPoint
        printfn "New client %d connected: %s" clientNumber (clientEndPoint.Address.ToString())
        printfn "Number of clients connected: %d" clients.Count
        Async.Start (async { handleClient clientInfo })
with
| :? System.Net.Sockets.SocketException as sockEx when sockEx.SocketErrorCode = System.Net.Sockets.SocketError.Interrupted ->
    printfn "Server interrupted. Cleaning up..."
    terminate ()
| ex ->
    printfn "Server error: %s" ex.Message
